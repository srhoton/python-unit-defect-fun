name: CI/CD - Lambda & Terraform

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.13"
  AWS_REGION: "us-east-1"

jobs:
  lint-test-python:
    name: Lint, Type Check, and Test Python
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Hatch (build backend)
        run: pip install hatch

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install .[dev]
          pip list | grep moto  # Verify moto installation

      - name: Lint with Ruff
        run: |
          ruff check .
          ruff format --check .

      - name: Type check with MyPy
        run: mypy src/

      - name: Security scan with Bandit
        run: bandit -r src/

      - name: Verify moto package
        run: |
          python -c "from moto import mock_dynamodb; print('mock_dynamodb is available')"
          echo "Moto package ready for testing"

      - name: Run tests with pytest
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest -vvs

      - name: Build Lambda package (zip)
        run: |
          hatch build
          # Create Lambda zip (source only, no dependencies for AWS Lambda)
          cd src && zip -r ../lambda.zip python_unit_defect_fun

      - name: Upload Lambda zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-zip
          path: lambda.zip

  lint-validate-terraform:
    name: Lint & Validate Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format
        run: terraform fmt -check -recursive
        working-directory: terraform

      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Lint with tflint
        uses: terraform-linters/setup-tflint@v4
      - name: Run tflint
        run: tflint --init && tflint
        working-directory: terraform

  deploy:
    name: Deploy Lambda & Terraform
    runs-on: ubuntu-latest
    needs: [lint-test-python, lint-validate-terraform]
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda zip artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-zip
          path: python-unit-defect-fun

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload Lambda zip to S3
        run: |
          aws s3 cp lambda.zip s3://unit-defect-lambda-artifacts/python-unit-defect-fun-lambda.zip
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="lambda_package_path=../lambda.zip" -var="lambda_s3_bucket=unit-defect-lambda-artifacts" -var="lambda_s3_key=python-unit-defect-fun-lambda.zip"
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform
