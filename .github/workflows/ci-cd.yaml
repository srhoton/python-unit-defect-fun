name: CI/CD - Lambda & Terraform

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.13"
  AWS_REGION: "us-east-1"

jobs:
  lint-test-python:
    name: Lint, Type Check, and Test Python
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Hatch (build backend)
        run: pip install hatch

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install .[dev]
          # Make sure moto with server feature is installed
          pip install 'moto[server]>=4.1.0'
          pip list | grep moto  # Verify moto installation

      - name: Lint with Ruff
        run: |
          ruff check .
          ruff format --check .

      - name: Type check with MyPy
        run: mypy src/

      - name: Security scan with Bandit
        run: bandit -r src/

      - name: Check moto package structure
        run: |
          # Check what mocking capability is available in moto
          echo "Checking moto package structure..."
          python -c "import moto; print('Available mock functions:', [f for f in dir(moto) if f.startswith('mock_')])"
          # Create temporary test file to handle different moto versions
          cat > detect_moto.py << 'EOF'
          import sys
          try:
              # Try moto 4.x style import (from specific service module)
              from moto.dynamodb import mock_dynamodb
              print("MOTO_IMPORT_STYLE=module")
          except ImportError:
              try:
                  # Try moto direct import style
                  from moto import mock_dynamodb
                  print("MOTO_IMPORT_STYLE=direct")
              except ImportError:
                  # No mock_dynamodb function found
                  print("MOTO_IMPORT_STYLE=unknown")
                  sys.exit(1)
          EOF
          # Run the detection and store the result
          python detect_moto.py > moto_style.txt || echo "Failed to detect moto import style"
          cat moto_style.txt
          MOTO_STYLE=$(cat moto_style.txt)
          echo "Detected moto import style: $MOTO_STYLE"

      - name: Update test imports if needed
        run: |
          # Get detected moto style
          MOTO_STYLE=$(cat moto_style.txt || echo "")
          
          if [[ "$MOTO_STYLE" == "MOTO_IMPORT_STYLE=module" ]]; then
            echo "Updating test file for module-style imports"
            sed -i 's/from moto import mock_dynamodb/from moto.dynamodb import mock_dynamodb/g' tests/test_lambda_handler.py
          elif [[ "$MOTO_STYLE" == "MOTO_IMPORT_STYLE=unknown" ]]; then
            echo "Neither import style worked, using alternative mock approach"
            # This is a fallback if both import styles failed
            sed -i 's/from moto import mock_dynamodb/from moto import mock_aws/g' tests/test_lambda_handler.py
            sed -i 's/with mock_dynamodb()/with mock_aws("dynamodb")/g' tests/test_lambda_handler.py
          else
            echo "Using direct import style (from moto import mock_dynamodb)"
          fi
          
          # Show the current import being used
          grep -n "mock_" tests/test_lambda_handler.py

      - name: Run tests with pytest
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          # Set AWS region for boto3
          export AWS_DEFAULT_REGION=us-east-1
          export AWS_REGION=us-east-1
          # Run with more verbose output and continue on error
          pytest -vvs || (echo "Tests failed - showing test file" && cat tests/test_lambda_handler.py && exit 1)

      - name: Build Lambda package (zip)
        run: |
          hatch build
          # Create Lambda zip (source only, no dependencies for AWS Lambda)
          cd src && zip -r ../lambda.zip python_unit_defect_fun
          cd .. && ls -la  # List files to verify zip was created successfully

      - name: Upload Lambda zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-zip
          path: lambda.zip

  lint-validate-terraform:
    name: Lint & Validate Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format
        run: terraform fmt -check -recursive
        working-directory: terraform

      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Lint with tflint
        uses: terraform-linters/setup-tflint@v4
      - name: Run tflint
        run: tflint --init && tflint
        working-directory: terraform

  deploy:
    name: Deploy Lambda & Terraform
    runs-on: ubuntu-latest
    needs: [lint-test-python, lint-validate-terraform]
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda zip artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-zip
          path: python-unit-defect-fun
      
      - name: Verify downloaded artifact
        run: |
          ls -la python-unit-defect-fun/
          echo "Verifying zip file integrity..."
          unzip -t python-unit-defect-fun/lambda.zip | head

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload Lambda zip to S3
        run: |
          aws s3 cp python-unit-defect-fun/lambda.zip s3://unit-defect-lambda-artifacts/python-unit-defect-fun-lambda.zip
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="lambda_package_path=../python-unit-defect-fun/lambda.zip" -var="lambda_s3_bucket=unit-defect-lambda-artifacts" -var="lambda_s3_key=python-unit-defect-fun-lambda.zip"
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform
